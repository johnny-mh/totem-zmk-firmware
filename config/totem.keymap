//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define DIG  2
#define SYS  3
#define QUICK_TAP_MS 175

/* Timeless homerow mods */
// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // thumb cluster for both hands

// proper urob's home row, uncomment it if you are not going to use visual editor
//#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
//    ZMK_HOLD_TAP(NAME, \
//        flavor = "balanced"; \
//        tapping-term-ms = <280>; \
//        quick-tap-ms = <QUICK_TAP_MS>; \
//        require-prior-idle-ms = <150>; \
//        bindings = <HOLD>, <TAP>; \
//        hold-trigger-key-positions = <TRIGGER_POS>; \
//        hold-trigger-on-release; \
//    )
//
//MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
//MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
//MAKE_HRM(hml_layer, &mo, &kp, KEYS_R THUMBS) // switch layer like HRM

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 16>;
        };

        caps-words {
            bindings = <&caps_word>;
            key-positions = <11 12 13>;
        };

        lang {
            bindings = <&press_two_keys LCTRL SPACE>;
            key-positions = <11 34>;
        };
    };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        press_two_keys: press_two_keys {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;
        };

        more_or_equal: more_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MORE_OR_EQUAL";
        };

        less_or_equal: less_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LESS_OR_EQUAL";
        };

        fun_arrow_right: fun_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "FUN_ARROW_RIGHT";
        };

        comment: comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR>;
            label = "MACROS_COMMENT";
        };
    };

    behaviors {
        // this is homerow mod that works identical to urob's one, but this one allows visual editor to understand

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <11 12 13 14 30 32 33 34 35 36 37 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <20 21 32 33 34 35 36 37 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34 35 16 17 18 19>;
        };

        comment_or: comment_or {
            compatible = "zmk,behavior-hold-tap";
            label = "slash_or_comm";
            bindings = <&comment>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            label = "BASE";
            bindings = <
         &kp Q         &kp W         &kp E        &kp R        &kp T        &kp Y    &kp U        &kp I        &kp O         &kp P
         &hml LSHFT A  &hml LCTRL S  &hml LGUI D  &hml LALT F  &kp G        &kp H    &hmr RALT J  &hmr LGUI K  &hmr LCTRL L  &hmr LSHIFT SEMICOLON
&kp TAB  &kp Z         &kp X         &kp C        &kp V        &kp B        &kp N    &kp M        &kp COMMA    &kp DOT       &comment_or 0 SLASH    &mt DOUBLE_QUOTES SQT
                                     &mo DIG      &lt NAV ESC  &kp SPACE    &kp RET  &lt SYS ESC  &mo DIG
            >;
        };

        Navigation {
            label = "Navigation";
            bindings = <
        &trans  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &trans  &trans    &none   &kp HOME      &kp UP    &kp END        &kt PAGE_UP
        &trans  &trans                &trans                &trans  &trans    &none   &kp LEFT      &kp DOWN  &kp RIGHT      &none
&trans  &trans  &trans                &trans                &trans  &trans    &none   &kp LA(LEFT)  &none     &kp LA(RIGHT)  &kt PAGE_DOWN  &kp CAPSLOCK
                                      &trans                &trans  &trans    &trans  &trans        &trans
            >;
        };

        digits {
            label = "Digits";
            bindings = <
        &kp PIPE                 &kp DOLLAR          &kp LEFT_BRACE              &kp RIGHT_BRACE                 &press_two_keys EQUAL GREATER_THAN    &kp PLUS   &kp N7  &kp N8  &kp N9  &kp SEMICOLON
        &hml LSHIFT EXCLAMATION  &hml LCTRL AT_SIGN  &hml LGUI LEFT_PARENTHESIS  &mt LALT RIGHT_PARENTHESIS      &kp BACKSLASH                         &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp KP_MULTIPLY
&trans  &kp AMPERSAND            &kp LCTRL           &mt LESS_THAN LEFT_BRACKET  &mt GREATER_THAN RIGHT_BRACKET  &kp GRAVE                             &kp MINUS  &kp N1  &kp N2  &kp N3  &kp PERIOD       &kp SLASH
                                                     &trans                      &trans                          &trans                                &trans     &kp N0  &trans
            >;
        };

        sim_layer {
            label = "SYSTEM";
            bindings = <
            &kp F1  &kp F2  &kp F3        &kp F4      &kp F5        &kp F6        &kp F7        &kp F8      &kp F9      &kp F10
            &trans  &trans  &trans        &trans      &trans        &kp C_MUTE    &kp C_PP      &trans      &trans      &trans
&bt BT_CLR  &trans  &trans  &out OUT_TOG  &bt BT_PRV  &bt BT_NXT    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_NEXT  &trans   &trans
                            &trans        &trans      &trans        &trans        &trans        &trans
            >;
        };
    };
};
